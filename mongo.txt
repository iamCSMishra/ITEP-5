MongoDb:-

1. show dbs

2. creating database or using existing datbase
   use empdb
   
3. Creating collection
   db.createCollection("employee")
   
   Collection :-
     a. Capped Collection
     b. Uncapped Collection   
     
4. db.test.insertOne({name:"A",age:25});     

5. db.test.insertMany([{name:"B",age:26,mobile:"900911223"},
    {name:"C",age: 35, mobile: "9009112443",gender:"male"}
   ])
   
   // select * from products where id = 2
6. db.products.find({id:2},{id:1,title:1,price:1})
 
   // select id,title from products where id=2 and title='abc'
   db.products.findOne({id:2,title:'abc'},{id:1,title:1,_id:0})
   
   Operators:
    $gt, $lt, $gte, $lte, $eq, $nq
    $and, $or, $lookup, $match.....
    
    // select * from products where price >= 100   
    db.products.find({price: {$gte: 100}},{id:1,title:1,price:1,_id:0})
    
    db.products.find({
      $and:[{price:{$gt:1000}},{price:{$lt:1500}}]
    },{id:1, title:1, price:1,_id:0})
    
    db.employee.find({
      $or:[{age:{$gt:30}},{salary:{$gte:70000}}]
    }) 
   
    db.employee.find().limit(5)
    
    db.employee.find({},{_id:0}).sort({salary:-1}).toArray()[1].salary
    
    db.employee.find({
      salary: db.employee.find({},{_id:0}).sort({salary:-1}).toArray()[1].salary
    })
    
    db.employee.find({
      salary:{$ne: db.employee.find({},{_id:0}).sort({salary:-1}).toArray()[1].salary}
    }).sort({salary:-1})  
    
    // Getting Second Highest salary value
    db.employee.find({ salary: { $ne: db.employee.find({}, { _id: 0 }).sort({ salary: -1 }).toArray()[1].salary } }).sort({ salary: -1}).toArray()[0].salary
   
    db.employee.find({
      salary: db.employee.find({ salary: { $ne: db.employee.find({}, { _id: 0 }).sort({ salary: -1 }).toArray()[1].salary } }).sort({ salary: -1}).toArray()[0].salary
    });  
 ---------------------------------------------------------------------
   Collections
    a. Embedded Documents
       order(Collection)
       {
         _id: '',
         orderDate: '',
         amount: 50000,
         orderItem:[
           {},
           {},
           {}
         ]
       }
    b. Referencing
       categories(collection)
       {
         _id: '',
         categoryName: 'smartphones'
       }
    
       products(Collection)
       {
         _id: '',
         category: 'smartphones'
       }
 
 -----------------------------------------------------------------
   aggregate pipeline
   db.categories.aggregate([
     {
       $lookup:{
         from: "products",
         localField: 'categoryName',
         foreignField: 'category',
         as: 'productList'
       }
     },
     {
       $match:{categoryName: 'home-decoration'}
     }
   ])
   db.products.aggregate([
     {
       $match:{price:{$gt:1000}}
     }
   ]);
   db.products.aggregate([
     {
       $match:{price:{$gt:1000}}
     },{
       $project:{title:1,price:1,_id:0}
     },
     {
       $addFields:{abc:20}
     }
   ])
 
   db.employee.updateOne({_id:ObjectId("662239bab80778b6f3be30ab")},{
     $set:{salary: 69000}
   }) 
 
   db.employee.update({age:32},{
     $set:{salary:90000}
   })
   
   With model (Mongoose) db
   without model   
   
   
   
   
   
   
   
